package com.rbs.transfer.domain;

import org.assertj.core.api.Assertions;
import org.junit.Test;

import java.math.BigDecimal;
import java.util.UUID;

import static org.junit.Assert.*;

public class TransactionTest {

    @Test
    public void should_return_passed_values() {

        UUID id = UUID.randomUUID();
        String sourceAccountNo = "17854689";
        String destinationAccountNo = "28645789";
        BigDecimal amount = BigDecimal.ONE;
        boolean isSucceed = true;
        boolean isCompleted = true;

        Transaction actual = new Transaction(id, sourceAccountNo, destinationAccountNo, amount, isSucceed, isCompleted);

        assertEquals(id, actual.getId());
        assertEquals(sourceAccountNo, actual.getSourceAccountNo());
        assertEquals(destinationAccountNo, actual.getDestinationAccountNo());
        assertEquals(amount, actual.getAmount());
        assertTrue(actual.isCompleted());
        assertTrue(actual.isSucceed());
        assertFalse(actual.isFailed());
    }

    @Test
    public void should_return_passed_values_with_autogenerated_id() {
        UUID id = UUID.randomUUID();
        String sourceAccountNo = "17854689";
        String destinationAccountNo = "28645789";
        BigDecimal amount = BigDecimal.ONE;
        boolean isSucceed = true;
        boolean isCompleted = true;

        Transaction actual = new Transaction(sourceAccountNo, destinationAccountNo, amount,isSucceed,isCompleted);

        assertEquals(sourceAccountNo, actual.getSourceAccountNo());
        assertEquals(destinationAccountNo, actual.getDestinationAccountNo());
        assertEquals(amount, actual.getAmount());
        assertNotNull(actual.getId());
        Assertions.assertThat(actual.getId()).isInstanceOf(UUID.class);
        assertTrue(actual.isCompleted());
        assertTrue(actual.isSucceed());
        assertFalse(actual.isFailed());
    }
}